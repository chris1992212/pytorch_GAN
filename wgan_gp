import argparse
import os
import numpy as np
import math
import sys

import torchvision.transforms as transforms
from torchvision.utils import save_image

from torch.utils.data import DataLoader
from torchvision import datasets
from torch.autograd import Variable

import torch.nn as nn
import torch.nn.functional as F
import torch.autograd as autograd
import torch
from torchvision.models import vgg19

os.makedirs("images", exist_ok=True)

parser = argparse.ArgumentParser()
parser.add_argument("--n_epochs", type=int, default=200, help="number of epochs of training")
parser.add_argument("--batch_size", type=int, default=64, help="size of the batches")
parser.add_argument("--lr", type=float, default=0.0002, help="adam: learning rate")
parser.add_argument("--b1", type=float, default=0.5, help="adam: decay of first order momentum of gradient")
parser.add_argument("--b2", type=float, default=0.999, help="adam: decay of first order momentum of gradient")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")
parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space")
parser.add_argument("--img_size", type=int, default=64, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--n_critic", type=int, default=5, help="number of training steps for discriminator per iter")
parser.add_argument("--clip_value", type=float, default=0.01, help="lower and upper clip value for disc. weights")
parser.add_argument("--sample_interval", type=int, default=400, help="interval betwen image samples")
opt = parser.parse_args()
print(opt)

img_shape = (opt.channels, opt.img_size, opt.img_size)

cuda = True if torch.cuda.is_available() else False


# class Generator(nn.Module):
#     def __init__(self):
#         super(Generator, self).__init__()
#
#         def block(in_feat, out_feat, normalize=True):
#             layers = [nn.Linear(in_feat, out_feat)]
#             if normalize:
#                 layers.append(nn.BatchNorm1d(out_feat, 0.8))
#             layers.append(nn.LeakyReLU(0.2, inplace=True))
#             return layers
#
#         self.model = nn.Sequential(
#             *block(opt.latent_dim, 128, normalize=False),
#             *block(128, 256),
#             *block(256, 512),
#             *block(512, 1024),
#             nn.Linear(1024, int(np.prod(img_shape))),
#             nn.Tanh()
#         )
#
#     def forward(self, z):
#         img = self.model(z)
#         img = img.view(img.shape[0], *img_shape)
#         return img
class Generator(nn.Module):

    def __init__(self):
        super(Generator, self).__init__()
        self.ch_in = 1
        self.fea = 64
        self.layer1 = nn.Sequential(nn.Conv2d(self.ch_in, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer2 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer3 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer4 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer5 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer6 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer7 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62
        self.layer8 = nn.Sequential(nn.Conv2d(self.fea, self.fea, 3), nn.ReLU(inplace=True))  # 62


        self.layer8_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer7_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer6_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer5_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer4_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer3_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer2_r = nn.ConvTranspose2d(self.fea, self.fea, 3)
        self.layer1_r = nn.ConvTranspose2d(self.fea, 1, 3)
        # self.output_layer = nn.Conv2d(self.fea, 1, 3, padding=1)

    def forward(self, x):
        layer1 = self.layer1(x)  # 62
        layer2 = self.layer2(layer1)  #  60
        layer3 = self.layer3(layer2)  #  58
        layer4 = self.layer4(layer3)  #  56
        layer5 = self.layer5(layer4)  #  54
        layer6 = self.layer6(layer5)  #  52
        layer7 = self.layer7(layer6)  #  50
        layer8 = self.layer8(layer7)  #  48

        outputs_8_r = self.layer8_r(layer8)  # 50
        outputs_8_r = outputs_8_r + layer7
        outputs_8_r = nn.ReLU(inplace=True)(outputs_8_r)

        outputs_7_r = self.layer7_r(outputs_8_r)  # 52
        outputs_7_r = outputs_7_r + layer6
        outputs_7_r = nn.ReLU(inplace=True)(outputs_7_r)

        outputs_6_r = self.layer6_r(outputs_7_r)  # 54
        outputs_6_r = outputs_6_r + layer5
        outputs_6_r = nn.ReLU(inplace=True)(outputs_6_r)

        outputs_5_r = self.layer5_r(outputs_6_r)  # 56
        outputs_5_r = outputs_5_r + layer4
        outputs_5_r = nn.ReLU(inplace=True)(outputs_5_r)

        outputs_4_r = self.layer4_r(outputs_5_r)  # 58
        outputs_4_r = outputs_4_r + layer3
        outputs_4_r = nn.ReLU(inplace=True)(outputs_4_r)

        outputs_3_r = self.layer3_r(outputs_4_r)  # 60
        outputs_3_r = outputs_3_r + layer2
        outputs_3_r = nn.ReLU(inplace=True)(outputs_3_r)

        outputs_2_r = self.layer2_r(outputs_3_r)  # 62
        outputs_2_r = nn.ReLU(inplace=True)(outputs_2_r)

        outputs_1_r = self.layer1_r(outputs_2_r)  # 64
        # outputs_1_r = self.output_layer(outputs_1_r)
        outputs_1_r = outputs_1_r + x
        outputs_1_r = nn.ReLU(inplace=True)(outputs_1_r)

        return outputs_1_r

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        self.model = nn.Sequential(
            nn.Linear(int(np.prod(img_shape)), 512),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(256, 1),
        )

    def forward(self, img):
        img_flat = img.view(img.shape[0], -1)
        validity = self.model(img_flat)
        return validity

class WGAN_VGG_FeatureExtractor(nn.Module):
    def __init__(self):
        super(WGAN_VGG_FeatureExtractor, self).__init__()
        vgg19_model = vgg19(pretrained=True)
        self.feature_extractor = nn.Sequential(*list(vgg19_model.features.children())[:35])

    def forward(self, x):
        out = self.feature_extractor(x)
        return out

def p_loss(x ,y):
    fake = x.repeat(1, 3, 1, 1)
    real = y.repeat(1, 3, 1, 1)
    feature_extractor = WGAN_VGG_FeatureExtractor().cuda()
    fake_feature = feature_extractor(fake)
    real_feature = feature_extractor(real)
    loss_temp = nn.L1Loss()
    loss = loss_temp(fake_feature, real_feature)
    # loss = nn.L1Loss()[fake_feature, real_feature]
    return loss


def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Conv") != -1:
        # torch.nn.init.normal_(m.weight.data, 0.0, 0.02)
        torch.nn.init.xavier_uniform_(m.weight.data, gain=1)
        # torch.nn.init.kaiming_normal_(m.weight.data, nonlinearity='relu')
        if hasattr(m, "bias") and m.bias is not None:
            torch.nn.init.constant_(m.bias.data, 0.0)
    elif classname.find("BatchNorm2d") != -1:
        torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
        torch.nn.init.constant_(m.bias.data, 0.0)

# Loss weight for gradient penalty
lambda_gp = 10

# Initialize generator and discriminator
generator = Generator()
discriminator = Discriminator()
# generator.load_state_dict(torch.load("pred_weight/net.pt"))
# discriminator.load_state_dict(torch.load("pred_weight/net.pt"))

if cuda:
    generator.cuda()
    discriminator.cuda()
    nn.DataParallel(generator)
    generator.apply(weights_init_normal)

# Configure data loader
# os.makedirs("../../data/mnist", exist_ok=True)
# dataloader = torch.utils.data.DataLoader(
#     datasets.MNIST(
#         "../../data/mnist",
#         train=True,
#         download=True,
#         transform=transforms.Compose(
#             [transforms.Resize(opt.img_size), transforms.ToTensor(), transforms.Normalize([0.5], [0.5])]
#         ),
#     ),
#     batch_size=opt.batch_size,
#     shuffle=True,
# )
def valid_data_load():
    img = np.load('valid_data_crop.npy')
    label = np.load('valid_label_crop.npy')
    return img, label

def train_data_load():
    img = np.load('train_data_crop_aug.npy')
    label = np.load('train_label_crop_aug.npy')
    return img, label

def compute_gradient_penalty(D, real_samples, fake_samples):
    """Calculates the gradient penalty loss for WGAN GP"""
    # Random weight term for interpolation between real and fake samples
    alpha = Tensor(np.random.random((real_samples.size(0), 1, 1, 1)))
    # Get random interpolation between real and fake samples
    interpolates = (alpha * real_samples + ((1 - alpha) * fake_samples)).requires_grad_(True)
    d_interpolates = D(interpolates)
    fake = Variable(Tensor(real_samples.shape[0], 1).fill_(1.0), requires_grad=False)
    # Get gradient w.r.t. interpolates
    gradients = autograd.grad(
        outputs=d_interpolates,
        inputs=interpolates,
        grad_outputs=fake,
        create_graph=True,
        retain_graph=True,
        only_inputs=True,
    )[0]
    gradients = gradients.view(gradients.size(0), -1)
    gradient_penalty = ((gradients.norm(2, dim=1) - 1) ** 2).mean()
    return gradient_penalty

def save_weights(sav_folder, net):
    if not os.path.exists(sav_folder):
        os.makedirs(sav_folder)
    torch.save(net.state_dict(), sav_folder+'\\net.pt')

def loss_calc(generator, img, label, batch_size):

    pred = []
    for idx in range(int(img.shape[0]/batch_size)):
        low = img[idx*batch_size: (1+idx)*(batch_size)]
        low_tensor = torch.from_numpy(low).type(torch.FloatTensor).cuda()

        pred_temp = generator(low_tensor)
        pred_temp_arr = pred_temp.detach().cpu().numpy()
        pred.append(pred_temp_arr)
    pred_arr = np.reshape(np.array(pred), (-1, 1, 64, 64), 'C')
    src_loss = np.mean(np.abs(img - label))
    l1_loss = np.mean(np.abs(pred_arr - label))
    print(src_loss, l1_loss)

# Optimizers
optimizer_G = torch.optim.Adam(generator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))

Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor
loss1 = torch.nn.L1Loss('mean')



# ----------
#  Training
# ----------

batches_done = 0
#-----Data Load----------
img, label = train_data_load()
img = np.transpose(img[..., np.newaxis], [0, 3, 1, 2])
label = np.transpose(label[..., np.newaxis], [0, 3, 1, 2])
valid_img, valid_label = valid_data_load()
valid_img = np.transpose(valid_img[..., np.newaxis], [0, 3, 1, 2])
valid_label = np.transpose(valid_label[..., np.newaxis], [0, 3, 1, 2])

for epoch in range(opt.n_epochs):

    # for i, (imgs, _) in enumerate(dataloader):
    for i in range(int(img.shape[0]/opt.batch_size)):
        idx = np.random.randint(0, img.shape[0], opt.batch_size)
        # Configure input
        low_img = torch.from_numpy(img[idx]).type(torch.FloatTensor).cuda()
        real_img = torch.from_numpy(label[idx]).type(torch.FloatTensor).cuda()
        # ---------------------
        #  Train Discriminator
        # ---------------------

        optimizer_D.zero_grad()

        # Sample noise as generator input
        # z = Variable(Tensor(np.random.normal(0, 1, (img.shape[0], opt.latent_dim))))
        z = low_img
        # Generate a batch of images
        fake_imgs = generator(low_img)

        # Real images
        real_validity = discriminator(real_img)
        # Fake images
        fake_validity = discriminator(fake_imgs)
        # Gradient penalty
        gradient_penalty = compute_gradient_penalty(discriminator, real_img.data, fake_imgs.data)
        # Adversarial loss
        d_loss = -torch.mean(real_validity) + torch.mean(fake_validity) + lambda_gp * gradient_penalty

        d_loss.backward()
        optimizer_D.step()

        optimizer_G.zero_grad()

        # Train the generator every n_critic steps
        if i % opt.n_critic == 0:

            # -----------------
            #  Train Generator
            # -----------------

            # Generate a batch of images
            fake_imgs = generator(z)
            # Loss measures generator's ability to fool the discriminator
            # Train on fake images
            fake_validity = discriminator(fake_imgs)
            g_loss = loss1(fake_imgs, real_img)-torch.mean(fake_validity)*0.0005 + p_loss(fake_imgs, real_img)

            g_loss.backward()
            optimizer_G.step()

            print(
                "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]"
                % (epoch, opt.n_epochs, i, low_img.shape[0], d_loss.item(), g_loss.item())
            )
            if batches_done % opt.sample_interval == 0:
                save_image(fake_imgs.data[:25], "images/%d.png" % batches_done, nrow=5, normalize=True)

            batches_done += opt.n_critic
    loss_calc(generator, valid_img, valid_label, opt.batch_size)
    sav_folder = "./pred_results"
    weight_folder = "./weight//" + str(epoch)
    save_weights(weight_folder, generator)
